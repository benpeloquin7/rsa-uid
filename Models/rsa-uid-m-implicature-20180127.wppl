var rData = [{'alpha':3, 'input':'word+cue2', 'modelName':'L1'}]

var getAlpha = function(rData) {
  var data = rData[0]
  return data['alpha']
}

var getInput = function(rData) {
  var data = rData[0]
  return data['input']
}

var getModelName = function(rData) {
  var data = rData[0]
  return data['modelName']
}

var values = [
    -3.0, -2.9, -2.8, -2.7, -2.6, -2.5, -2.4, -2.3, -2.2, -2.1,
    -2.0, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1,
    -1.0, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1,
    0.0,
    0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0,
    1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0,
    2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0
  ];

var discrete_gaussian = function() {
  var probabilities = map(
    function(x) {return Math.exp(Gaussian({mu:0, sigma:1}).score(x));},
    values
  );
  return function() { return values[discrete(probabilities)]; };
}
var discrete_uniform = function() {
  return function() { return uniformDraw(values); };
}

var x_prior = discrete_gaussian();
var theta_prior = discrete_uniform();
var n_particles = 1000;
var alpha = getAlpha(rData);
var input = getInput(rData);

var utterances = [
  "",
  "word",
  "word+cue1",
  "word+cue2"
];

var cost = {
  "":0,
  "word": 0,
  "word+cue1": 2,
  "word+cue2": 4
};

var utterance_prior = function() {
  return utterances[discrete(map(function(u) {return Math.exp(-cost[u]);}, utterances))];
};

var meaning = function(utterance, x, thetas) {
  if (utterance == "word") {
    return x >= thetas[0];
  } else if (utterance == "word+cue1") {
    return x >= thetas[1];
  } else if (utterance == "word+cue2") {
    return x >= thetas[2];
  } else {
    return true;
  }
};

var L0 = cache(function(utterance, thetas) {
  return Enumerate(function() {
    var x = x_prior();
    condition(meaning(utterance, x, thetas));
    return x;
  });
});

var S1 = cache(function(x, thetas) {
  return Enumerate(function() {
    var utterance = utterance_prior();
    factor(L0(utterance, thetas).score(x));
    return utterance;
  });
});


var L1 = cache(function(utterance) {
  Infer({
    method: 'SMC', particles: 500, rejuvSteps: 10, model() {
      var x = x_prior();
      var thetas = [
        theta_prior(),
        theta_prior(),
        theta_prior()
      ];
      factor(alpha * S1(x, thetas).score(utterance));
      return x;
    }
  })
})

// var L1 = cache(function(utterance) {
//   Infer({
//     method: 'MCMC', samples:1000, lag:100, burn:10, model() {
//       var x = x_prior();
//       var thetas = [
//         theta_prior(),
//         theta_prior(),
//         theta_prior()
//       ];
//       factor(alpha * S1(x, thetas).score(utterance));
//       return x;
//     }
//   })
// })

var getModel = function(modelName) {
  var models = {
    'L0': L0,
    'S1': S1,
    'L1': L1
  }
  return models[modelName]
}

var modelName = getModelName(rData)
var model = getModel(modelName)

var expectations = {
  "prior": 0,
  "word": expectation(model("word")),
  "word+cue1": expectation(L1("word+cue1")),
  "word+cue2": expectation(L1("word+cue2"))
};
expectations