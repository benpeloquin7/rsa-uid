/**************************************************
/******************* Scaffolding *******************
***************************************************/
var runExperiment = function(speaker, world) {
  return sample(speaker(world))
}

var runExperiments = function(worldGenerator, speaker, n, data) {
  /*
  Parameters
  ----------
  worldGenerator: fn
    Generate a full world.
  spekeaker: fn
    RSA speaker function. Input worlds, output utterances.
  n: int
    Number of forward samples.
  data: array
    Data store (corpus).
    
  Returns
  -------
  array
    Array of utterances.
  
  */
  var world = worldGenerator()
  var currUtt = runExperiment(speaker, world)  // really this should be a dict object with context
  data.push(currUtt)
  return n <= 1 ? data : runExperiments(worldGenerator, speaker, n-1, data)
}

var worldGenerator = function() {
  /* Note that this is different from worldPrior. Ideally we will have more "complex"
  worlds of (a) multiple objects and (b) objects with multiple dimensions. In the 
  single object, single object case this will look just like a single prior over a dimension.
  */
  var colors = Categorical({
    vs:['r', 'b', 'g'], 
    ps:[1, 1, 1]})
  return {color: sample(colors)}
}

var THETA = 0.20
var worldDistr = Categorical({
  vs:[{color:'r'}, {color:'g'}, {color:'b'}], 
  ps:[0.2, 1, 1]
})
var worldPrior = function() {return sample(worldDistr)}
var utteranceDistr = Categorical({
  vs:['r', 'g', 'b', 'X r', 'X g', 'X b', 'X', ''], 
  ps:[1, 1, 1, 0.5, 0.5, 0.5, 0.1, 0.01]
})
var utterancePrior = function() {return sample(utteranceDistr)}

var decode = function(utteranceProduced, noiseModel) {
  Infer({
    model() {
      var utteranceIntended = utterancePrior()
      var noisyUtterance = noiseModel(utteranceIntended, THETA)
      factor(utteranceProduced == noisyUtterance ? 0 : -Infinity)
      return utteranceIntended
    }
  })
}


var buildSpeakerModel = function(listenerModel, utterancePrior, noiseModel) {
  /* Build generic speaker model.
  
  Parameters
  ----------
  listenerModel: fn
    Input world, output utterance.
  utterancePrior: fn
    Samples from prior over utterances.
  noiseModel: fn, optional
    Perturb utterance.
   
  Returns
  --------
  fn
    speaker function.

  */
  return function(world) {
    Infer({
      model() {
        var utterance = utterancePrior()
        if (noiseModel != undefined) {
          var noisyUtterance = noiseModel(utterance)
          var L = listenerModel(noisyUtterance)
          factor(L.score(world))
        } else {
          var L = listenerModel(utterance)
          factor(L.score(world))
        }
        return utterance
      }
    })
  }
}

var buildListenerModel = function(speakerModel, worldPrior, noiseModel) {
  /* Build generic listener model.
  
  Parameters
  ----------
  speakerModel: fn, optional
    Input world, output utterance.
  worldPrior : distr,
    Prior distribution over objects.
  noiseModel: fn, optional
    Invert noise model to reason about intended utterance from produced.
    E.g. p(u_intended | u_produced)
   
  Returns
  --------
  fn
    Listener function.

  */
  return function(utterance) {
    Infer({
      model(){
        var world = worldPrior()
        var S = speakerModel(world)
        if (noiseModel != undefined) {
          var intendedUtterance = sample(decode(utterance, noiseModel))
          factor(S.score(intendedUtterance))
        } else {
          factor(S.score(utterance))
        }
        return world
      }
    })
  }
}


/**************************************************
/******************* Run **************************
***************************************************/

/* To run experiment 
0. listener model.
  [REQUIRES] meaning fn
  [REQUIRES world prior
1. speaker model.
  [listener model] 
  [REQUIRES] utterance prior
2. world prior.
3. utterance prior.
4. data hold (array)

call run
*/

/* Noise models */
var _removeEmptyItems = function(arr) {
  filter(function(x) {return x != ''}, arr)
}

var replaceIndex = function(arr, index, replacement) {
  return arr.slice(0, index).concat([replacement]).concat(arr.slice(index + 1, arr.length))
}
var transformUtterance = function(transformFn) {
  return function(utterance) {
      var tokens = utterance.split(' ')
      var index = sample(RandomInteger({n:tokens.length}))
      var replacement = transformFn(index)
      return _removeEmptyItems(replaceIndex(tokens, index, replacement)).join(' ')
  }  
}
var _deleteFn = function(s) {
  return ''
}
var deleteTransform = transformUtterance(_deleteFn)

var vacuousNoiseModel = function(utterance) {
  return utterance
}
var deleteNoiseModel = function(utterance) {
  return flip(THETA) ? deleteTransform(utterance) : utterance
}

var utteranceMeaning = function(utterance) {
  var lastCharIndex = utterance.length - 1
  return utterance.includes('r') ? utterance.charAt(lastCharIndex) :
         utterance.includes('g') ? utterance.charAt(lastCharIndex) :
         utterance.includes('b') ? utterance.charAt(lastCharIndex) :
         sample(worldDistr)['color']
}

var meaning = function(utterance, world) {
  var worldColor = world['color']
  return utteranceMeaning(utterance) == worldColor
}

var buildListenerBase = function(noiseModel) {
  return function(utterance) {
    Infer({
      model() {
        var world = worldPrior()
        var intendedUtterance = sample(decode(utterance, noiseModel))
        var m = meaning(intendedUtterance, world)
        factor(m ? 0 : -Infinity)
        return world
      }
    })
  }
}

/**************************************************
/******************* Agents ***********************
***************************************************/

// var L0Base = function(utterance) {
//   Infer({
//     model() {
//       var world = worldPrior()
//       var utterance = utterance == '' ? utterancePrior() : utterance
//       var m = meaning(utterance, world)
//       factor(m ? 0 : -Infinity)
//       return world
//     }
//   })
// }

var L0Base = buildListenerBase(vacuousNoiseModel)
var L0Decoder = buildListenerBase(deleteNoiseModel)

var S1VV = buildSpeakerModel(L0Base, utterancePrior, vacuousNoiseModel)
var S1VD = buildSpeakerModel(L0Decoder, utterancePrior, vacuousNoiseModel)
var S1DV = buildSpeakerModel(L0Base, utterancePrior, deleteNoiseModel)
var S1DD = buildSpeakerModel(L0Decoder, utterancePrior, deleteNoiseModel)

var L1VVV = buildListenerModel(S1VV, worldPrior, vacuousNoiseModel)
var L1VVD = buildListenerModel(S1VD, worldPrior, vacuousNoiseModel)
var L1VDD = buildListenerModel(S1DD, worldPrior, vacuousNoiseModel)
var L1DDD = buildListenerModel(S1DD, worldPrior, deleteNoiseModel)
var L1DDV = buildListenerModel(S1DV, worldPrior, deleteNoiseModel)
var L1DVV = buildListenerModel(S1VV, worldPrior, deleteNoiseModel)
var L1DVD = buildListenerModel(S1VD, worldPrior, deleteNoiseModel)
var L1VDV = buildListenerModel(S1DV, worldPrior, vacuousNoiseModel)

var S2VVVV = buildSpeakerModel(L1VVV, utterancePrior, vacuousNoiseModel)
var S2VVVD = buildSpeakerModel(L1VVD, utterancePrior, vacuousNoiseModel)
var S2VVDD = buildSpeakerModel(L1VDD, utterancePrior, vacuousNoiseModel)
var S2VDDD = buildSpeakerModel(L1DDD, utterancePrior, vacuousNoiseModel)
var S2DDDD = buildSpeakerModel(L1DDD, utterancePrior, deleteNoiseModel)
var S2DDDV = buildSpeakerModel(L1DDV, utterancePrior, deleteNoiseModel)
var S2DDVV = buildSpeakerModel(L1DVV, utterancePrior, deleteNoiseModel)
var S2DVVV = buildSpeakerModel(L1VVV, utterancePrior, deleteNoiseModel) //
var S2DVVD = buildSpeakerModel(L1VVD, utterancePrior, deleteNoiseModel)
var S2VDDV = buildSpeakerModel(L1DDV, utterancePrior, vacuousNoiseModel)
var S2DVDV = buildSpeakerModel(L1VDV, utterancePrior, deleteNoiseModel)
var S2VVDV = buildSpeakerModel(L1VDV, utterancePrior, vacuousNoiseModel)
var S2VDVV = buildSpeakerModel(L1DVV, utterancePrior, vacuousNoiseModel)

var L2VVVVV = buildListenerModel(S2VVVV, worldPrior, vacuousNoiseModel)
var L2VDVDV = buildListenerModel(S2DVDV, worldPrior, deleteNoiseModel)
var L2VDDDD = buildListenerModel(S2DDDD, worldPrior, vacuousNoiseModel)
var L2DVVVV = buildListenerModel(S2VVVV, worldPrior, deleteNoiseModel)
var L2VVVDD = buildListenerModel(S2VVDD, worldPrior, vacuousNoiseModel)
var L2VVVVD = buildListenerModel(S2VVVD, worldPrior, vacuousNoiseModel)
var L2DVVVV = buildListenerModel(S2VVVV, worldPrior, deleteNoiseModel)
var L2DDVVV = buildListenerModel(S2DVVV, worldPrior, deleteNoiseModel) // um implicature
var L2DDVDV = buildListenerModel(S2DVDV, worldPrior, deleteNoiseModel)
var L2DDDVV = buildListenerModel(S2DDVV, worldPrior, deleteNoiseModel)
var L2DDVDV = buildListenerModel(S2DVDV, worldPrior, deleteNoiseModel)

var S3DVVVVV = buildSpeakerModel(L2VVVVV, utterancePrior, deleteNoiseModel)
var S3DVDVDV = buildSpeakerModel(L2VDVDV, utterancePrior, deleteNoiseModel)

var L3DDVVVVV = buildListenerModel(S3DVVVVV, worldPrior, deleteNoiseModel)
var L3DDVDVDV = buildListenerModel(S3DVDVDV, worldPrior, deleteNoiseModel)


// var d = []
// viz.table(runExperiments(worldGenerator, S1, 100, d))

var runListener = function(listenerModel, nameOut) {
  console.log(nameOut)
  console.log('X')
  viz.table(listenerModel('X'))
  console.log('X r')
  viz.table(listenerModel('X r'))
  console.log('r')
  viz.table(listenerModel('r'))
  console.log('X b')
  viz.table(listenerModel('X b'))
  console.log('b')
  viz.table(listenerModel('b'))
  console.log('')
  viz.table(listenerModel(''))
}

var runSpeaker = function(speakerModel, nameout) {
  console.log(nameout)
  console.log("{color:'r'}")
  viz.table(speakerModel({color:'r'}))
  console.log("{color:'b'}")
  viz.table(speakerModel({color:'b'}))
}


// runListener(L0Base, 'L0Base')
// runListener(L0Decoder, 'L0Decoder')
// runListener(L1VVV, 'L1VVV')
// runListener(L1VVD, 'L1VVD')
// runListener(L1VDV, 'L1VDV')
// runListener(L1VDD, 'L1VDD')
// runListener(L1DVD, 'L1DVD')
// runListener(L1DDD, 'L1DDD')
// runListener(L1DVV, 'L1DVV')
// runListener(L2VVVDD, 'L2VVVDD')
// runListener(L2VVVVD, 'L2VVVVD')
// runListener(L2DVVVV, 'L2DVVVV')

// runListener(L2DDVVV, 'L2DDVVV')
// runListener(L2DDDVV, 'L2DDDVV')
// runListener(L2DDVDV, 'L2DDVDV')

// runListener(L3DDVVVVV, 'L3DDVVVVV')
// runListener(L3DDVDVDV, 'L3DDVDVDV')


// console.log("Speakers")
runSpeaker(S1VV, 'S1VV')
runSpeaker(S1VD, 'S1VD')
runSpeaker(S1DV, 'S1DV')
runSpeaker(S1DD, 'S1DD')
runSpeaker(S2DVVV, 'S2DVVV')
runSpeaker(S2DVDV, 'S2DVDV')
runSpeaker(S2DDDD, 'S2DDDD')
runSpeaker(S2VVDV, 'S2VVDV')
runSpeaker(S2VVDD, 'S2VVDD')
runSpeaker(S2VVVD, 'S2VVVD')
// runSpeaker(S3DVVVVV, 'S3DVVVVV')
// runSpeaker(S3DVDVDV, 'S3DVDVDV')